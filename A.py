# -*- coding: utf-8 -*-
import pygame
import random


def draw_figure(x, y, figure, rotate_1, next_1):
    if not next_1:
        if not present == 4:
            field[((y + figure[rotate_1][0][1]) - 50) // 25][(((x + figure[rotate_1][0][0]) - 38) // 25) % 13] = \
                [figure[rotate_1][4], 'M']
            field[((y + figure[rotate_1][1][1]) - 50) // 25][(((x + figure[rotate_1][1][0]) - 38) // 25) % 13] = \
                [figure[rotate_1][4], 'M']
            field[((y + figure[rotate_1][2][1]) - 50) // 25][(((x + figure[rotate_1][2][0]) - 38) // 25) % 13] = \
                [figure[rotate_1][4], 'M']
            field[((y + figure[rotate_1][3][1]) - 50) // 25][(((x + figure[rotate_1][3][0]) - 38) // 25) % 13] = \
                [figure[rotate_1][4], 'M']
        else:
            field[((y + figure[rotate_1][0][1]) - 50) // 25][(((x + figure[rotate_1][0][0]) - 38) // 25) % 7 + 3] = \
                [figure[rotate_1][4], 'M']
            field[((y + figure[rotate_1][1][1]) - 50) // 25][(((x + figure[rotate_1][1][0]) - 38) // 25 ) % 7 + 3] = \
                [figure[rotate_1][4], 'M']
            field[((y + figure[rotate_1][2][1]) - 50) // 25][(((x + figure[rotate_1][2][0]) - 38) // 25) % 7 + 3] = \
                [figure[rotate_1][4], 'M']
            field[((y + figure[rotate_1][3][1]) - 50) // 25][(((x + figure[rotate_1][3][0]) - 38) // 25 ) % 7 + 3] = \
                [figure[rotate_1][4], 'M']
    else:
        screen.fill(figure[rotate_1][4], pygame.Rect(x + figure[rotate_1][0][0], y + figure[rotate_1][0][1], 24, 24))
        screen.fill(figure[rotate_1][4], pygame.Rect(x + figure[rotate_1][1][0], y + figure[rotate_1][1][1], 24, 24))
        screen.fill(figure[rotate_1][4], pygame.Rect(x + figure[rotate_1][2][0], y + figure[rotate_1][2][1], 24, 24))
        screen.fill(figure[rotate_1][4], pygame.Rect(x + figure[rotate_1][3][0], y + figure[rotate_1][3][1], 24, 24))


scores = {0: 0, 1: 100, 2: 300, 3: 700, 4: 1500}

t_figure = {0: [(0, 0), (25, 25), (25, 0), (50, 0), (163, 73, 164)],
            3: [(0, 25), (25, 25), (25, 0), (25, 50), (163, 73, 164)],
            2: [(25, 0), (25, 25), (0, 25), (50, 25), (163, 73, 164)],
            1: [(0, 0), (25, 25), (0, 25), (0, 50), (163, 73, 164)]}

l_figure = {0: [(0, 0), (0, 25), (25, 0), (50, 0), (200, 201, 14)],
            1: [(0, 0), (25, 25), (25, 0), (25, 50), (200, 201, 14)],
            2: [(0, 25), (25, 25), (50, 25), (50, 0), (200, 201, 14)],
            3: [(0, 0), (25, 50), (0, 25), (0, 50), (200, 201, 14)]}

j_figure = {0: [(0, 0), (25, 0), (50, 25), (50, 0), (0, 0, 255)],
            1: [(0, 50), (25, 25), (25, 0), (25, 50), (0, 0, 255)],
            2: [(0, 0), (25, 25), (50, 25), (0, 25), (0, 0, 255)],
            3: [(0, 0), (25, 0), (0, 25), (0, 50), (0, 0, 255)]}

o_figure = {0: [(0, 0), (0, 25), (25, 0), (25, 25), (255, 242, 0)],
            1: [(0, 0), (0, 25), (25, 0), (25, 25), (255, 242, 0)],
            2: [(0, 0), (0, 25), (25, 0), (25, 25), (255, 242, 0)],
            3: [(0, 0), (0, 25), (25, 0), (25, 25), (255, 242, 0)]}

i_figure = {0: [(0, 0), (0, 25), (0, 50), (0, 75), (153, 217, 234)],
            1: [(0, 0), (50, 0), (25, 0), (75, 0), (153, 217, 234)],
            2: [(0, 0), (0, 25), (0, 50), (0, 75), (153, 217, 234)],
            3: [(0, 0), (50, 0), (25, 0), (75, 0), (153, 217, 234)]}

z_figure = {0: [(25, 0), (0, 0), (50, 25), (25, 25), (255, 0, 0)],
            1: [(25, 0), (0, 25), (25, 25), (0, 50), (255, 0, 0)],
            2: [(25, 0), (0, 0), (50, 25), (25, 25), (255, 0, 0)],
            3: [(25, 0), (0, 25), (25, 25), (0, 50), (255, 0, 0)]}

s_figure = {0: [(25, 0), (0, 25), (50, 0), (25, 25), (0, 255, 0)],
            1: [(0, 0), (0, 25), (25, 25), (25, 50), (0, 255, 0)],
            2: [(25, 0), (0, 25), (50, 0), (25, 25), (0, 255, 0)],
            3: [(0, 0), (0, 25), (25, 25), (25, 50), (0, 255, 0)]}

figures = [t_figure, i_figure, j_figure, l_figure, o_figure, z_figure, s_figure]

field = [
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N']],
    [[(65, 65, 65), 'S'], [(65, 65, 65), 'S'], [(65, 65, 65), 'S'], [(65, 65, 65), 'S'], [(65, 65, 65), 'S'], [(65, 65, 65), 'S'], [(65, 65, 65), 'S'], [(65, 65, 65), 'S'], [(65, 65, 65), 'S'], [(65, 65, 65), 'S'], [(65, 65, 65), 'S'], [(65, 65, 65), 'S'], [(65, 65, 65), 'S']]
]

if __name__ == '__main__':
    pygame.init()
    size = width, height = 800, 600
    screen = pygame.display.set_mode(size)
    pygame.display.set_caption("TETRIS")
    background = pygame.image.load('Back.jpg')
    screen.blit(background, (0, 0))
    score = 0
    lines = 0
    rotate = 0
    tetris = 0
    now_figure = random.choice(figures)
    next_figure = random.choice(figures)
    present_figure = random.choice(figures)
    new = False
    clock = pygame.time.Clock()
    running = True
    x_pos = 188
    y_pos = 50
    FALL = pygame.USEREVENT + 1
    CHOICE = pygame.USEREVENT + 2
    pygame.time.set_timer(FALL, 1000)
    restart = False
    choice = False
    present = random.randrange(1, 5)
    time = 300
    while running:

        if not restart:

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                elif event.type == pygame.KEYDOWN:
                    if event.key == 120:
                        spin = True
                        if field[((y_pos + now_figure[(rotate + 1) % 4][0][1]) - 50) // 25][
                            (((x_pos + now_figure[(rotate + 1) % 4][0][0]) - 38) // 25) % 13][1] == 'S':
                            spin = False
                        if field[((y_pos + now_figure[(rotate + 1) % 4][1][1]) - 50) // 25][
                            (((x_pos + now_figure[(rotate + 1) % 4][1][0]) - 38) // 25) % 13][1] == 'S':
                            spin = False
                        if field[((y_pos + now_figure[(rotate + 1) % 4][2][1]) - 50) // 25][
                            (((x_pos + now_figure[(rotate + 1) % 4][2][0]) - 38) // 25) % 13][1] == 'S':
                            spin = False
                        if field[((y_pos + now_figure[(rotate + 1) % 4][3][1]) - 50) // 25][
                            (((x_pos + now_figure[(rotate + 1) % 4][3][0]) - 38) // 25) % 13][1] == 'S':
                            spin = False

                        if spin:
                            rotate = (rotate + 1) % 4
                    elif event.key == 122:

                        rotate = (rotate - 1) % 4
                    elif event.key == 1073741905:
                        move = True
                        for i in range(20):
                            for ii in range(13):
                                try:
                                    if field[i][ii][1] == 'M' and field[i + 1][ii][1] == 'S':
                                        move = False
                                except IndexError:
                                    move = False
                        if move:
                            y_pos += 25
                    elif event.key == 1073741904:
                        move = True
                        for i in range(20):
                            for ii in range(13):
                                if field[i][ii][1] == 'M' and field[i][(ii - 1) % 13][1] == 'S':
                                    move = False
                        if move:
                            x_pos -= 25
                    elif event.key == 1073741903:
                        move = True
                        for i in range(20):
                            for ii in range(13):
                                if field[i][ii][1] == 'M' and field[i][(ii + 1) % 13][1] == 'S':
                                    move = False
                        if move:
                            x_pos += 25
                    else:
                        print(event.key)
                elif event.type == FALL:
                    move = True
                    for i in range(20):
                        for ii in range(13):
                            try:
                                if field[i][ii][1] == 'M' and field[i + 1][ii][1] == 'S':
                                    move = False
                            except IndexError:
                                move = False
                    if move:
                        y_pos += 25
                    pygame.time.set_timer(FALL, 0)
                    pygame.time.set_timer(FALL, 1000)
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    if 510 <= event.pos[0] <= 720 and 500 <= event.pos[1] <= 540:
                        restart = True
                    if choice:
                        if 577 <= event.pos[0] <= 655 and 88 <= event.pos[1] <= (88 + 134):
                            choice = False
                            now_figure = next_figure
                            next_figure = random.choice(figures)
                            present_figure = random.choice(figures)
                            pygame.time.set_timer(CHOICE, 0)
                            x_pos = 188
                            y_pos = 50
                            break
                        else:
                            choice = False
                            now_figure = present_figure
                            next_figure = random.choice(figures)
                            present_figure = random.choice(figures)
                            pygame.time.set_timer(CHOICE, 0)
                            x_pos = 188
                            y_pos = 50
                            break
                elif event.type == CHOICE:
                    choice = False
                    now_figure = next_figure
                    next_figure = random.choice(figures)
                    present_figure = random.choice(figures)
                    pygame.time.set_timer(CHOICE, 0)
                    x_pos = 188
                    y_pos = 50
            if not choice:
                screen.blit(background, (0, 0))
                for i in range(20):
                    for ii in range(13):
                        if i == 0 and field[i][ii][1] == 'S':
                            restart = True
                            break
                        if field[i][ii][1] == 'M':
                            field[i][ii] = [(65, 65, 65), 'N']

                draw_figure(x_pos, y_pos, now_figure, rotate, False)
                if present == 5:
                    screen.fill((65, 65, 65), pygame.Rect(655, 55, 10, 134))
                    draw_figure(675, 88, present_figure, 0, True)
                elif present == 1:
                    screen.fill((248, 166, 2), pygame.Rect(13, 75, 24, 450))
                    screen.fill((248, 166, 2), pygame.Rect(363, 75, 24, 450))
                    screen.fill((248, 166, 2), pygame.Rect(63, 25, 275, 24))
                    screen.fill((248, 166, 2), pygame.Rect(63, 550, 275, 24))
                draw_figure(577, 88, next_figure, 0, True)

                for i in range(19, -1, -1):
                    for ii in range(13):
                        if field[i][ii][1] == 'M' and field[i + 1][ii][1] == 'S':
                            new = True

                if new:
                    if present == 5:
                        choice = True
                        pygame.time.set_timer(CHOICE, 5000)
                        time = 300
                    else:
                        now_figure = next_figure
                        next_figure = random.choice(figures)
                        present_figure = random.choice(figures)
                    if present == 2:
                        a = []
                        for i in range(20):
                            for ii in range(13):
                                if field[i][ii][1] == 'N' and field[i + 1][ii][1] == 'S':
                                    a.append([i, ii])
                        b = random.choice(a)
                        field[b[0]][b[1]] = [(255, 0, 0), 'S']
                    if present == 3:
                        a = []
                        for i in range(20):
                            for ii in range(13):
                                if field[i][ii][1] == 'S' and field[i - 1][ii][1] == 'N':
                                    a.append([i, ii])
                        if a != []:
                            b = random.choice(a)
                            field[b[0]][b[1]] = [(65, 65, 65), 'N']

                    x_pos = 188
                    y_pos = 50
                    rotate = 0
                    new = False
                    present = random.randrange(1, 6)
                    for i in range(20):
                        for ii in range(13):
                            if field[i][ii][1] == 'M':
                                field[i][ii][1] = 'S'

                to_delete = []
                tetris = 0
                for i in range(19, -1, -1):
                    clear = True
                    for ii in range(13):
                        if field[i][ii][1] != 'S':
                            clear = False
                    if clear:
                        to_delete.append(i)
                        tetris += 1
                        lines += 1
                for i in sorted(to_delete):
                    field.pop(i)
                    field = [[[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                              [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                              [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                              [(65, 65, 65), 'N']]] + field
                if present == 1:
                    score += scores[tetris] * 2
                else:
                    score += scores[tetris]
                font = pygame.font.Font(None, 25)
                text_score = font.render(str(score), True, (255, 255, 255))
                screen.blit(text_score, [607, 317])
                text_line = font.render(str(lines), True, (255, 255, 255))
                screen.blit(text_line, [600, 346])

                for i in range(20):
                    for ii in range(13):
                        screen.fill(field[i][ii][0], pygame.Rect((ii * 25 + 38), (i * 25 + 50), 24, 24))

                if present == 4:
                    screen.fill((0, 0, 0), pygame.Rect(87, 49, 26, 501))
                    screen.fill((0, 0, 0), pygame.Rect(287, 49, 26, 501))
            else:
                screen.fill((0, 0 ,0), pygame.Rect(150, 10, 300, 10))
                screen.fill((255, 0, 0), pygame.Rect(150, 10, time, 10))
                time -= 1

        else:
            present = random.randrange(1, 5)
            choice = False
            field = [
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'], [(65, 65, 65), 'N'],
                 [(65, 65, 65), 'N']],
                [[(65, 65, 65), 'S'], [(65, 65, 65), 'S'], [(65, 65, 65), 'S'], [(65, 65, 65), 'S'],
                 [(65, 65, 65), 'S'], [(65, 65, 65), 'S'], [(65, 65, 65), 'S'], [(65, 65, 65), 'S'],
                 [(65, 65, 65), 'S'], [(65, 65, 65), 'S'], [(65, 65, 65), 'S'], [(65, 65, 65), 'S'],
                 [(65, 65, 65), 'S']]
            ]
            tetris = 0
            score = 0
            lines = 0
            rotate = 0
            x_pos = 188
            y_pos = 50
            now_figure = random.choice(figures)
            next_figure = random.choice(figures)
            new = False
            restart = False
        pygame.display.flip()
        clock.tick(60)
    pygame.quit()
